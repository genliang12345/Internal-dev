@model System.Collections.Generic.List<Nop.Plugin.Pickup.PickupInStore.Models.PublicStoreModel>
@{
    Layout = "_ColumnsOne";
    NopHtml.AddTitleParts(T("Plugins.Pickup.PickupInStore.Public.PageTitle").Text);
}
<style>
    .pickup-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .card {
        width: calc(25% - 20px); /* 4 cards per row - adjust margin */
        margin: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: left;
        background: white;
    }



    .image-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 aspect ratio (standard video ratio). Change this to your desired ratio. */
        height: 0;
        overflow: hidden;
    }

        .image-container img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover; /* or contain, depending on your needs */
        }

    .card h2 {
        margin: 10px;
    }


    .card .buttons {
        display: flex;
        padding: 10px 0;
    }

    .card a { /* Changed from button to a */
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        width: 100%;
        margin: 5px;
        text-decoration: none; /* Remove underline from links */
        display: inline-block; /* Make anchors behave like blocks */
        text-align: center; /* Center text */
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }

    .card .outline {
        background-color: transparent;
        border: 1px solid #6d5dfc;
        color: #6d5dfc;
    }

    .card .fill {
        background-color: #6d5dfc;
        border: none;
        color: white;
    }

    .card .outline:hover, .card .outline:active {
        background-color: #e0f7fa; /* Light background on hover/active */
        border-color: #6d5dfc; /* Darker border on hover/active */
        color: #6d5dfc; /* Darker text on hover/active */
    }

    .card .fill:hover, .card .fill:active {
        background-color: #6d5dfc; /* Darker background on hover/active */
    }

    .card-title {
        margin: 10px 0;
    }

    .card-data {
        padding: 10px;
    }

    .badge {
        display: inline-block;
        padding: 0.3em 0.6em;
        border-radius: 1em;
        font-size: 0.8em;
        font-weight: bold;
        text-transform: uppercase;
        white-space: nowrap;
    }

        /* Open status */
        .badge.open {
            background-color: #4caf50; /* Green background */
            color: white; /* White text */
        }

        /* Close status */
        .badge.closed {
            background-color: #f44336; /* Red background */
            color: white; /* White text */
        }

    .gray-color {
        color: gray;
    }

    /* Responsive Design */
    @@media (max-width: 1024px) { /* Tablet view */
        .card {
            width: calc(50% - 20px); /* 2 cards per row */
        }
    }

    @@media (max-width: 768px) { /* Mobile view */
        .card {
            width: 100%; /* 1 card per row */
        }
    }
</style>
<style>
    .search-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 0 10px;
        margin-top: 17px;
        margin-bottom: 10px;
    }

    .search-container {
        position: relative;
        width: 100%;
        max-width: 500px;
        height: 60px;
        background: white;
        border-radius: 30px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        padding: 10px;
        display: flex;
        align-items: center;
    }

    .search-input {
        flex: 1;
        padding: 15px;
        border: none;
        outline: none;
        border-radius: 30px;
        font-size: 16px;
        background: transparent;
    }

    .loading {
        width: 20px;
        height: 20px;
        border: 3px solid #ccc;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        display: none;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 600px) {
        .search-container {
            width: 100%;
            height: 50px;
        }
    }
</style>
<div class="page shopping-cart-page">
    <div class="page-title">
        <h1>@T("Plugins.Pickup.PickupInStore.Public.PageTitle")</h1>
    </div>
    <div class="search-wrapper">
        <div class="search-container">
            <input type="text" class="search-input" id="search" placeholder="Search shop locations...">
            <div class="loading"></div>
        </div>
    </div>
    <div class="page-body">
        <div class="pickup-container">
        </div>
    </div>
</div>

<script asp-location="Footer">
    let timer;
         function fetchResults() {
             clearTimeout(timer);
             $(".loading").show();

             timer = setTimeout(function() {
                 let query = $("#search").val();
                    fetchResultsAjax(query);
             }, 1000);
         }
         function fetchResultsAjax(q){
             let location = getStoredLocation();
              var postData = { q: q  };
              if(location){
                  postData.latitude = location.latitude;
                  postData.longitude = location.longitude;
              }
                     addAntiForgeryToken(postData);
                     $.ajax({
                         url: "@(Url.Action("FetchPickups", "StoreLocatorPublic"))", // Replace with actual API URL
                         type: "POST",
                         data: postData,
                         success: function(response) {
                             console.log("Search results:", response);
                             $(".pickup-container").html(response);
                         },
                         complete: function() {
                             $(".loading").hide();
                         }
                     });
         }
         fetchResultsAjax('');
         $("#search").on("input", fetchResults);

         $("#search").on("keypress", function(event) {
             if (event.which === 13) { // Enter key
                 event.preventDefault();
                 fetchResults();
             }
         });

             // Function to ask for user location and store it in localStorage
    function getUserLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const userLocation = {
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude,
                    };
                    localStorage.setItem('userLocation', JSON.stringify(userLocation));
                    fetchResults();
                },
                (error) => {
                    console.error('Error getting location:', error.message);
                }
            );
        } else {
            console.error('Geolocation is not supported by this browser.');
        }
    }

    // Function to read user location from localStorage
    function getStoredLocation() {
        const storedLocation = localStorage.getItem('userLocation');
        return storedLocation ? JSON.parse(storedLocation) : null;
    }

    // Example usage
    $(function (){
      getUserLocation();
    })
   
  

</script>