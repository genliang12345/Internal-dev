@using Nop.Services.Localization
@using Nop.Core
@using Nop.Services.Cms
@inject ILocalizationService localizationService
@inject IStoreContext storeContext
@inject ISettingService settingService
@inject IWidgetPluginManager widgetPluginManager

@{
    Layout = "_ColumnsOne";

    var homepageTitle = await localizationService.GetLocalizedAsync(await storeContext.GetCurrentStoreAsync(), s => s.HomepageTitle);
    var isBlogNewsPluginInstalled = await widgetPluginManager.IsPluginActiveAsync("NopStation.Plugin.Widgets.BlogNews");

    //title
    if (!string.IsNullOrEmpty(homepageTitle))
    {
        NopHtml.AddTitleParts(homepageTitle);
    }

    var homepageDescription = await localizationService.GetLocalizedAsync(await storeContext.GetCurrentStoreAsync(), s => s.HomepageDescription);

    //meta
    if (!string.IsNullOrEmpty(homepageDescription))
    {
        NopHtml.AddMetaDescriptionParts(homepageDescription);
    }
    var store = await storeContext.GetCurrentStoreAsync();
    var showHomePageCategory = true;
    var showHomePageProduct = true;
    var showBestSeller = true;

    if (await settingService.GetSettingByKeyAsync<bool>
           ("NopGadgetSettings.HideHomePageFeaturedCategories", storeId: store.Id, loadSharedValueIfNotFound: true))
    {
        showHomePageCategory = false;
    }
    if (await settingService.GetSettingByKeyAsync<bool>
           ("NopGadgetSettings.HideHomePageProducts", storeId: store.Id, loadSharedValueIfNotFound: true))
    {
        showHomePageProduct = false;
    }
    if (await settingService.GetSettingByKeyAsync<bool>
           ("NopGadgetSettings.HideHomePageBestSellers", storeId: store.Id, loadSharedValueIfNotFound: true))
    {
        showBestSeller = false;
    }

    //page class
    NopHtml.AppendPageCssClassParts("html-home-page");
}
<div class="page home-page">
    <div class="page-body">
        <div class="top-slider responsive-spacing">
            <div class="top-slider-left">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageTop })
            </div>
            <div class="top-slider-right">
                <div class="top-slider-right-wrapper">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "homepage-top-right-top" })
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "homepage-top-right-bottom" })
                </div>
            </div>
        </div>
        <div class="container responsive-spacing">
            @await Component.InvokeAsync(typeof(TopicBlockViewComponent), new { systemName = "HomepageText" })
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeCategories })

        @if (showHomePageCategory)
        {
            @await Component.InvokeAsync(typeof(HomepageCategoriesViewComponent))
        }

        <div class="container">
            <div class="slider-ad-2">
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "homepage-BeforeHomepageProducts-left" })
                @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "homepage-BeforeHomepageProducts-right" })
            </div>
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeProducts })

        @if (showHomePageProduct)
        {
            @await Component.InvokeAsync(typeof(HomepageProductsViewComponent))
        }

        <div class="slider-ad-single container responsive-spacing">
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "home_page_single_add" })
        </div>

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeBestSellers })

        @if (showBestSeller)
        {
            @await Component.InvokeAsync(typeof(HomepageBestSellersViewComponent))
        }

        <div class="slider-ad-3">
            <div class="slider-ad-3-wrap">
                <div class="slider-ad-3-left">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "homepage-3banner-left" })
                </div>
                <div class="slider-ad-3-right">
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "homepage-3banner-right-top" })
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = "homepage-3banner-right-bottom" })
                </div>
            </div>
        </div>
        
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforeNews })
        @if (!isBlogNewsPluginInstalled)
        {
            @await Component.InvokeAsync(typeof(HomepageNewsViewComponent))
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBeforePoll })
        @await Component.InvokeAsync(typeof(HomepagePollsViewComponent))
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HomepageBottom })
    </div>
</div>
